"""Custom Layers for a Deep Convolutional Generative Adversarial Network

This module contains custom layers used in the Deep Convolutional Generative Adversarial Network Architecure.

Classes:
    Generator(nn.Module): Implements a Convolutional generator for GAN which taken in random noise and generates image from it.
    Discriminator(nn.Module): Implements a Convolutional Discriminator to detect fake or real image from the generator
"""

import torch
from torch import nn
from torchinfo import summary

class Generator(nn.Module):
    """
    Generator Module for the DC GAN.

    This class implements the DC GAN's generator module. It takes an input tensor of shape
    (batch_size, latent_dim, 1, 1) and applies the generator model to generate an image, The target image basically.
    It converts random noise into (3, 64, 64) sized output image.

    Parameters:
        latent_dim (int): The dimension of the input noise for the generator.
        mid_channels (int): The no of channels to use in mid-layers. We multiply a certain number with this number
        out_channels (int): The no of channels to produce in the output image.

    Inputs:
        x (torch.Tensor): Input tensor of shape (batch_size, latent_dim, 1, 1).

    Returns:
        torch.Tensor: Output tensor of shape (batch_size, out_channels, 64, 64).
    """

    def __init__(self, latent_dim: int, mid_channels: int, out_channels: int) -> None:
        super().__init__()
        self.model = nn.Sequential(
            *self.generator_block(
                latent_dim,
                mid_channels * 16,
                kernel=4,
                stride=2,
                padding=1,
                normalize=False,
            ),
            *self.generator_block(mid_channels * 16, mid_channels * 8),
            *self.generator_block(mid_channels * 8, mid_channels * 4),
            *self.generator_block(mid_channels * 4, mid_channels * 2),
            *self.generator_block(mid_channels * 2, mid_channels),
            nn.ConvTranspose2d(mid_channels, out_channels, kernel_size=4, stride=2, padding=1),
            nn.Tanh()
        )

    @staticmethod
    def generator_block(in_channels, out_channels, kernel=4, stride=2, padding=1, normalize=True) -> nn.Sequential:
        """
        Generator Block for the Generator Model.

        This function returns a generator block for the Generator Model. Takes in in_channels, out_channels, kernel, stride, padding
        and a normalize boolean and returns a Sequential Block with one Transposed Convolution Layer, normalization layer(incase normalize is required)
        and a Relu Activation Function.

        Parameters:
            in_channels (int): The number of channels in the input
            out_channels (int): The number of channels to produce in the output
            kernel (int): The size of kernel (filter)
            stride (int): The stride to use on the input
            padding (int): The padding to apply to the image
            normalize (bool): if normalization layer should be used or not

        Returns:
            torch.nn.Sequential : Single Generator Block including the defined layers
        """
        return nn.Sequential(
            nn.ConvTranspose2d(
                in_channels=in_channels,
                out_channels=out_channels,
                kernel_size=kernel,
                stride=stride,
                padding=padding,
            ),
            nn.BatchNorm2d(num_features=out_channels) if normalize else nn.Identity(),
            nn.ReLU(inplace=True),
        )

    def forward(self, x):
        """
        Forward pass of the Generator.

        This method applies the forward pass of the generator model to the input tensor x.

        Parameters:
            x (torch.Tensor): Input tensor of shape (batch_size, latent_dim, 1, 1).

        Returns:
            torch.Tensor: Output tensor of shape (batch_size, output_channels, 64, 64).
        """
        return self.model(x)

class Discriminator(nn.Module):
    """
    Discriminator Module for the DC GAN.

    This class implements the DC GAN's discriminator module. It takes an input tensor of shape
    (batch_size, img_channels, 64, 64) and applies the discriminator model to discriminate between fake and real images.
    The fake ones being generated by the generator.

    Parameters:
        in_channels (int): The number of channels in the input
        mid_channels (int): The number of channels to use in the mid-layers. Again used by multiplying a certain number at each layer
        out_channels (int): The number of channels to produce in the output
    Inputs:
        x (torch.Tensor): Input tensor of shape (batch_size, in_channels, 64, 64).

    Returns:
        Either the input image is real or fake.
    """

    def __init__(self, in_channels, mid_channels, out_channels):
        super().__init__()
        self.model = nn.Sequential(
            *self.discriminator_block(in_channels, mid_channels, normalize=False),
            *self.discriminator_block(mid_channels, mid_channels * 2),
            *self.discriminator_block(mid_channels * 2, mid_channels * 4),
            *self.discriminator_block(mid_channels * 4, mid_channels * 8),
            nn.Conv2d(mid_channels * 8, out_channels, 4, 2, 0),
            nn.Sigmoid()
        )

    @staticmethod
    def discriminator_block(in_channels, out_channels, normalize=True):
        """
        Discriminator Block for the Generator Model.

        This function returns a discriminator block for the Discriminator Model. Takes in in_channels, out_channels,
        and a normalize boolean and returns a Sequential Block with one Convolution Layer, normalization layer(incase normalize is required)
        and a LeakyRelu Activation Function.

        Parameters:
            in_channels (int): The number of channels in the input
            out_channels (int): The number of channels to produce in the output
            normalize (bool): if normalization layer should be used or not

        Returns:
            torch.nn.Sequential : Single Discriminator Block including the defined layers
        """
        return nn.Sequential(
            nn.Conv2d(
                in_channels=in_channels,
                out_channels=out_channels,
                kernel_size=4,
                stride=2,
                padding=1,
            ),
            nn.BatchNorm2d(out_channels) if normalize else nn.Identity(),
            nn.LeakyReLU(0.2),
        )

    def forward(self, x):
        """
        Forward pass of the Discriminator.

        This method applies the forward pass of the discriminator model to the input tensor x.

        Parameters:
            x (torch.Tensor): Input tensor of shape (batch_size, img_channels, 64, 64).

        Returns:
            torch.Tensor: Output tensor of shape (batch_size, 1, 1, 1).
        """
        return self.model(x)
