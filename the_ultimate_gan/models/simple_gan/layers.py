"""Custom Layers for a Simple Generative Adversarial Network

This module contains custom layers used in the Generative Adversarial Network Architecture.

Classes:
    Generator(nn.Module): Implements a simple generator for GAN which taken in random noise and generates image from it.
    Discriminator(nn.Module): Implements a simple Discriminator to detect fake or real image from the generator
"""

import torch
from torch import nn


class Generator(nn.Module):
    """
    Generator Module for the Simple GAN.

    This class implements the simple GAN's generator module. It takes an input tensor of shape
    (batch_size, latent_dim) and applies the generator model to generate an image, The target image basically.
    It converts random noise into img_dim sized output which then unsqueezes to form the target image.

    Parameters:
        latent_dim (int): The dimension of the input noise for the generator.
        img_dim (int): The dimension of input images so the generator can output same dimensions.

    Inputs:
        x (torch.Tensor): Input tensor of shape (batch_size, latent_dim).

    Returns:
        torch.Tensor: Output tensor of shape (batch_size, img_dim).
    """

    def __init__(self, latent_dim: int, img_dim: int) -> None:
        super().__init__()
        self.model = nn.Sequential(
            *self.generator_block(latent_dim, 128, normalize=False),
            *self.generator_block(128, 256),
            *self.generator_block(256, 512),
            *self.generator_block(512, 1024),
            nn.Linear(1024, img_dim),
            nn.Tanh()
        )

    @staticmethod
    def generator_block(
        input_size: int, output_size: int, normalize: bool = True
    ) -> nn.Sequential:
        """
        Generator Block for the Generator Model.

        This function returns a generator block for the Generator Model. Takes in input and output size
        and a normalize boolean and returns a Sequential Block with one linear layer, one normalization layer(incase normalize is required)
        and a LeakyRelu Activation Function.

        Parameters:
            input_size (int): The input size for linear layer
            output_size (int): The output size to be used in linear layer and normalization layer
            normalize (bool): if normalization layer should be used or not

        Returns:
            torch.nn.Sequential : Single Generator Block including the defined layers
        """
        return nn.Sequential(
            nn.Linear(input_size, output_size),
            nn.BatchNorm1d(output_size, 0.8) if normalize else nn.Identity(),
            nn.LeakyReLU(0.2, inplace=True),
        )

    def forward(self, x: torch.tensor):
        """
        Forward pass of the Generator.

        This method applies the forward pass of the generator model to the input tensor x.

        Parameters:
            x (torch.Tensor): Input tensor of shape (batch_size, latent_dim).

        Returns:
            torch.Tensor: Output tensor of shape (batch_size, img_dim).
        """
        return self.model(x)


class Discriminator(nn.Module):
    """
    Discriminator Module for the Simple GAN.

    This class implements the simple GAN's discriminator module. It takes an input tensor of shape
    (batch_size, img_dim) and applies the discriminator model to discriminate between fake and real images.
    The fake ones being generated by the generator.

    Parameters:
        img_dim (int): The dimension of input images for the discriminator's neural network input shape.

    Inputs:
        x (torch.Tensor): Input tensor of shape (batch_size, latent_dim).

    Returns:
        Either the input image is real or fake.
    """

    def __init__(self, img_dim):
        super().__init__()
        self.model = nn.Sequential(
            nn.Linear(in_features=img_dim, out_features=512),
            nn.LeakyReLU(0.2, inplace=True),
            nn.Linear(in_features=512, out_features=256),
            nn.LeakyReLU(0.2, inplace=True),
            nn.Linear(in_features=256, out_features=128),
            nn.LeakyReLU(0.2, inplace=True),
            nn.Linear(in_features=128, out_features=1),
            nn.Sigmoid(),
        )

    def forward(self, x: torch.tensor):
        """
        Forward pass of the Discriminator.

        This method applies the forward pass of the discriminator model to the input tensor x.

        Parameters:
            x (torch.Tensor): Input tensor of shape (batch_size, img_dim).

        Returns:
            Float: The possibility of the input image being fake or real
        """
        return self.model(x)
